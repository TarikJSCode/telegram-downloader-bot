import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler, filters
from yt_dlp import YoutubeDL
from keep_alive import keep_alive
keep_alive()

BOT_TOKEN = os.environ['BOT_TOKEN']
DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

VALID_SOURCES = ['tiktok.com', 'instagram.com', 'facebook.com', 'fb.watch', 'pinterest.com', 'pin.it']

# /start –∫–æ–º–∞–Ω–¥–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
# /start –∫–æ–º–∞–Ω–¥–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì• –Ø–∫ —Å–∫–∞—á–∞—Ç–∏ –≤—ñ–¥–µ–æ", callback_data="how_to")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –º–µ–Ω–µ –≤ —á–∞—Ç", url="https://t.me/videomoment_bot?startgroup=true")],
        [InlineKeyboardButton("üì¨ –ó–≤ º—è–∑–æ–∫ –∑ –∞–≤—Ç–æ—Ä–æ–º", url="https://t.me/shadow_tar")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —Å–∫–∞—á–∞—Ç–∏ –≤—ñ–¥–µ–æ –∑ TikTok, Instagram, Facebook –∞–±–æ Pinterest.\n\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:",
        reply_markup=reply_markup
    )

    

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "how_to":
        await query.edit_message_text(
            "üì• *–Ø–∫ —Å–∫–∞—á–∞—Ç–∏ –≤—ñ–¥–µ–æ:*\n\n"
            "1. –ó–Ω–∞–π–¥–∏ –≤—ñ–¥–µ–æ –≤ TikTok, Instagram, Facebook –∞–±–æ Pinterest\n"
            "2. –°–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
            "3. –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –≤ —Ü–µ–π —á–∞—Ç\n"
            "4. –Ø –ø—Ä–∏—à–ª—é —Ç–æ–±—ñ –≥–æ—Ç–æ–≤–µ –≤—ñ–¥–µ–æ ‚úÖ",
            parse_mode="Markdown"
        )

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    print(f"[LOG] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message_text}")

    # –†–æ–∑—à–∏—Ä–∏—Ç–∏ –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è pin.it
    if "pin.it/" in message_text:
        try:
            response = requests.head(message_text, allow_redirects=True)
            message_text = response.url
            print(f"[LOG] –†–æ–∑—à–∏—Ä–µ–Ω–æ pin.it –¥–æ: {message_text}")
        except Exception as e:
            print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—à–∏—Ä–∏—Ç–∏ pin.it: {e}")
            return

    if not any(src in message_text for src in VALID_SOURCES):
        return

    await update.message.reply_text("‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤—ñ–¥–µ–æ, –∑–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏...")

    try:
        # –û–±–∏—Ä–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π cookie-—Ñ–∞–π–ª
        cookie_file = None
        if 'instagram.com' in message_text:
            cookie_file = 'instagram_cookies.txt'
        elif 'pinterest.com' in message_text:
            cookie_file = 'pinterest_cookies.txt'

        ydl_opts = {
            'outtmpl': f'{DOWNLOAD_DIR}/%(title).70s.%(ext)s',
            'format': 'mp4',
            'quiet': True,
            'noplaylist': True,
        }

        if cookie_file:
            ydl_opts['cookiefile'] = cookie_file

        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(message_text, download=True)
            filename = ydl.prepare_filename(info)

        with open(filename, 'rb') as video:
            await context.bot.send_video(chat_id=update.effective_chat.id, video=video, caption="‚úÖ –ì–æ—Ç–æ–≤–æ!")
        os.remove(filename)

    except Exception as e:
        print(f"[ERROR] {e}")
        # –ë–æ—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, —â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —á–∞—Ç

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()
